remind.c
#include <stdio.h>
#include <string.h>
#define MAX_REMIND 50
#define MSG_LEN 60
int read_line(char str[], int n);
int main(void)
{
	char reminder[MAX_REMIND][MSG_LEN + 3];
	char day_str[3] = { '\0' }, msg_str[MSG_LEN + 1];
	int day, i, j, num_remind = 0;
	for (;;)
	{
		if (num_remind == MAX_REMIND)
		{
			printf("-No space left--\n");
			break;
		}
		printf("Enter day and reminder:");
		scanf("%2d", &day);
		if (day == 0)
			break;
		sprintf(day_str, "%2d", day);
		read_line(msg_str, MSG_LEN);
		for (i = 0; i < num_remind; i++)
			if (strcmp(day_str, reminder[i]) < 0)
				break;
		for (j = num_remind; j > i; j--)
			strcpy(reminder[j], reminder[j - 1]);
		strcpy(reminder[i], day_str);
		strcat(reminder[i], msg_str);
		num_remind++;
	}
	printf("\nDay Reminder\n");
	for (i = 0; i < num_remind; i++)
		printf("%s\n", reminder[i]);
	return 0;
}
int read_line(char str[], int n)
{
	int ch, i = 0;
	while ((ch = getchar()) != '\n'&&i<n)
			str[i++] = ch;
	str[i] = '\0';
	return i;
}
exercise
5.
(a)
#include<ctype.h>
void capitalize(char *str)
{
	int i;
	for(i=0;str[i]!='\0';i++)
		toupper(str[i]);
}
(b)
#include<ctype.h>
void capitalize(char *str)
{
	while(*str!='\0')
	 toupper(*str++);
}
6.
void censor(char *str)
{
     while(*(str+)!='\0')
     {
     	if(*str=='f'&&*(str+1)=='o'&&*(str+2)=='o')
     	{
     		*str=x;*(str+1)=x;*(str+2)=x;str+=3;
     	}
     	else str++;
     }
}
11.
int strcmp(char *s1,char *s2)
{
      while(*s1++==*s2++)
      	;
      return *s1-*s2
}
12.
void get_extension(const char *domain,char *index_url)
{
	char *p;
	int nlen,i;
	nlen=strlen(char);
	for(p=domain+nlen-1)
		if(*p=='.')
			break;
	if(i==0)
		index_url=nullptr;
	else
		strcpy(index_url,p+1);
}
13.
void build_index_url(const char *domain,char *index_url)
{
	char str[100];
	strcpy(str,"http://www.");
	strcat(str,domain);
	strcat(str,"/index.html");
	strcpy(index_url,str);

}
16.
int count_spaces(const char s[])
{
	int count =0;
	while(*s!='\0')
		if(*s++==' ')
			count++;
	return count;
}
17.
bool test_extension(const char *file_name,const char *extension)
{
	char *p=file_name;
	while(*p!='\0')
		toupper(*p++);
	while(*p!='.')
		p--;
	p++；
	if(strcmp(p,extension)==0)
		return true;
	else 
		return false;

}
18.
void remove_filename(char *url)
{
	int n;
	n=strlen(url);
	url+=n;
	while(*url--!='/');
	*(url+1)='\0';
}





1.
#include<stdio.h>
#include<string.h>
int read_string(char *str);
int main(void)
{
	char ch1[20], ch2[20], ch3[20];
	int num;
	printf("Enter a word:");
	if (read_string(ch1) == 4);
	strcpy(ch3, ch1);
	for (;;)
	{
		printf("Enter a word:");
			if (read_string(ch2) == 4)
				break;
		if (strcmp(ch1, ch2)>0)
			strcpy(ch1, ch2);
		if (strcmp(ch3, ch2)<0)
			strcpy(ch3, ch2);
	}
	printf("Smallest word:%s\n", ch1);
	printf("Largest word:%s\n", ch3);
	return 0;
}
int read_string(char *str)
{
	int num = 0, ch;
	while ((ch = getchar()) != '\n')
		str[num++] = ch;
	str[num] = '\0';
	return num;
}
2.(a)&&(b)
#include <stdio.h>
#include <string.h>
#define MAX_REMIND 50
#define MSG_LEN 60
int read_line(char str[], int n);
int main(void)
{
	char reminder[MAX_REMIND][MSG_LEN + 3];
	char day_str[9] = { '\0' }, msg_str[MSG_LEN + 1];
	int day, i, j,hour,minute, num_remind = 0;
	for (;;)
	{
		if (num_remind == MAX_REMIND)
		{
			printf("-No space left--\n");
			break;
		}
		printf("Enter day and reminder:");
		scanf("%2d", &day);
		scanf("%d:%d",&hour,&minute);
		if (day == 0||hour>=24||hour<0||minute<0||minute>60)
			break;
		if(day>31)
		{
			printf("A wrong day.igorned\n");
			continue;
		}
		sprintf(day_str, "%2d %2d:%2d", day,hour,minute);
		read_line(msg_str, MSG_LEN);
		for (i = 0; i < num_remind; i++)
			if (strcmp(day_str, reminder[i]) < 0)
				break;
		for (j = num_remind; j > i; j--)
			strcpy(reminder[j], reminder[j - 1]);
		strcpy(reminder[i], day_str);
		strcat(reminder[i], msg_str);
		num_remind++;
	}
	printf("\nDay Reminder\n");
	for (i = 0; i < num_remind; i++)
		printf("%s\n", reminder[i]);
	return 0;
}
int read_line(char str[], int n)
{
	int ch, i = 0;
	while ((ch = getchar()) != '\n'&&i<n)
			str[i++] = ch;
	str[i] = '\0';
	return i;
}
4.
#include<stdio.h>
#include<string.h>
int main(int argc, char *argv[])
{
	int i;
	for(i=argc-1;i>0;i--)
		printf("%s\n",argv[i]);
	return 0;
}
6.
#include<stdio.h>
#include<string.h>
int main()
{
	const char *ch1[] =
	{ "ten","eleven","twelve",
		"third","fourteen","sixteen",
		"seventeen","eighteen","nineteen"
	};
	const char *ch2[] =
	{
		"twenty","thirty","forty",
		"fifty","sixty","seventy",
		"eighty","ninety"
	};
	const char *ch3[] =
	{
		"","-one","-two","-three",
		"-four","-five","-six",
		"-seven","-eight","-nine"
	};
	int a, b;
	printf("Enter a two—digit number:");
	scanf("%1d%1d", &a, &b);
	if (a == 1)
		printf("You enter the number %s\n", ch1[b]);
	else if (a == 0)
		printf("The number you entered is not a two_digit number\n");
	else
		printf("You enter the nubmer %s%s\n", ch2[a-2], ch3[b]);
	return 0;
}
7.
#include<stdio.h>
#include<string.h>
void main()
{
	char *ch1[]=
	        {   "ten","eleven","twelve",
	            "third","fourteen","sixteen",
	            "seventeen","eighteen","nineteen"
	        };
	char *ch2[]=
	        { 
		        "twenty","thirty","forty",
		        "fifty","sixty","seventy",
		        "eighty","ninety"
            };
    char *ch3[]=
            {
            	"","-one","-two","-three",
            	"-four","-five","-six",
            	"-seven","-eight","-nine"
            };
    int a,b;
    printf("Enter a two—digit number:");
    scanf("%1d%1d",&a,&b);
    if(a==1)
    	printf("You enter the number %s\n",ch1[b]);
    else if(a==0)
    	printf("The number you entered is not a two_digit number\n");
    else 
    	printf("You enter the nubmer %s%s\n",ch2[a],ch3[b]);
    return 0;
}
8.
#include<stdio.h>
#include<string.h>
#include<ctype.h>
int compute_vowel_count(char *word);
int main(void)
{
	char word[128];
	printf("Enter a word: ");
	scanf("%s", word);
	printf("Scrabble value : %d", compute_vowel_count(word));
	return 0;
}
int compute_vowel_count(char *word)
{
	int i, value = 0;
	int N = strlen(word);
	for (int i = 0; i < N; i++)
	{
		word[i] = toupper(word[i]);
	}
	for (int i = 0; i < N; i++)
	{
		switch (word[i])
		{
		case 'A': value += 1; break;
		case 'B': value += 3; break;
		case 'C': value += 3; break;
		case 'D': value += 2; break;
		case 'E': value += 1; break;
		case 'F': value += 4; break;
		case 'G': value += 2; break;
		case 'H': value += 4; break;
		case 'I': value += 1; break;
		case 'J': value += 8; break;
		case 'K': value += 5; break;
		case 'L': value += 1; break;
		case 'M': value += 3; break;
		case 'N': value += 1; break;
		case 'O': value += 1; break;
		case 'P': value += 3; break;
		case 'Q': value += 10; break;
		case 'R': value += 1; break;
		case 'S': value += 1; break;
		case 'T': value += 1; break;
		case 'U': value += 1; break;
		case 'V': value += 4; break;
		case 'W': value += 4; break;
		case 'X': value += 8; break;
		case 'Y': value += 4; break;
		case 'Z': value += 10; break;
		default:;
		}
	}
	return value;
}
9.
#include<stdio.h>
#include<string.h>
int compute_vowel_count(const char *sentence);
int main(void)
{
	char ch[100];																		
	printf("Enter a sentence:");
	gets(ch); 
	printf("Your sentence contains %d vowels",compute_vowel_count((const char *)ch));
}
int compute_vowel_count(const char *sentence)
{
    int num = 0, i;
	for (i = 0; i<strlen(ch); i++)														
	if ('a' == ch[i] || 'e' == ch[i] || 'i' == ch[i] || 'o' == ch[i] || 'u' == ch[i])
		num++;
	return num;
}
11.
#include<stdio.h>
#include<string.h>
double compute_average_word_length(const char * str);
void main()
{
	char str[100];
	printf("Enter a sentence:");
	scanf("%s",char);
	printf("The average word length is:%.1f\n",compute_average_word_length(str));
}
double compute_average_word_length(const char *str)
{
	int nlen=0;
	int nword=0;
    while(*str!='\0')
    	if(*str++==' ')
    		nword++;//最后还有一个单词
    	else nlen++;
    return (double)nword/(double)nlen;
}
12.
#include<stdio.h>
#include<string.h>
#define MAX_WORDS 20
#define MAX_CHARACTERS 30
void read_words(char str[MAX_WORDS][MAX_CHARACTERS]);
void print_words(char str[MAX_WORDS][MAX_CHARACTERS]);
int main()
{
	char str[MAX_WORDS][MAX_CHARACTERS];
	printf("Enter your sentence:");
	read_words(str);
	printf("Reversal of sentence:");
	print_words(str);
	return 0;
}
void read_words(char str[MAX_WORDS][MAX_CHARACTERS])
{
	int row = 0, column = 0;
	int ch;
	for (; row<MAX_WORDS; row++)
		for (column = 0; column<MAX_CHARACTERS; column++)
			str[row][column] = '\0';
	row = column = 0;
	while ((ch = getchar()) != '\n')
	{
		if (ch != ' ')
		{
			str[row][column++] = ch;
		}
		else
		{
			str[row++][column] = '\0';
			column = 0;
		}
	}
}
void print_words(char str[MAX_WORDS][MAX_CHARACTERS])
{
	int row;
	for (row = MAX_WORDS - 1; row >= 0; row--)
		if (str[row][0] != '\0')
			printf("%s ", str[row]);
	printf("\n");
}