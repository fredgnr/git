1.
#include <stdio.h>
#define STACK_SIZE 100
char contents[STACK_SIZE];
int top=0;
void make_empty(void);
bool is_empty(void);
bool is_full(void);
void push(char i);
char pop(void);
void main()
{
	char i;
	int sum1=0,sum2=0;//sum1='{'-'}';sum2='('-')';
	make_empty();
	printf("Enter parenteses and /or braces:");
	while(!is_full()&&(i=getchar())!=EOF)//push
	{
		push(i);
	}
	while(!is_empty())//pop
	{
		if(pop()=='{')
			sum1++;
		else if(pop()=='}')
			sum1--;
		else if(pop()=='(')
			sum2++;
		else if(pop()==')')
			sum2--;
		else ;
	}
	if(sum1==0&&sum2==0)
		printf("Parenteses/braces are nested properly\n");
	else printf("Parenteses/braces are not nested properly\n");
}

void make_empty(void)
{
	top=0;
}
bool is_empty(void)
{
	return top==0;
}
bool is_full(void)
{
	return top==STACK_SIZE;
}
void push(char i)
{
	if(is_full())
		 printf("stack_overflow()\n");
	else 
		contents[top++]=i;
}
char pop(void)
{
	if(is_empty())
		printf("stack_underflow()\n");
	else 
		return contents[--top];
}
2.
//Classifies a poker hand
#include<stdio.h>
#include <stdlib.h>

#define NUM_RANKS 13
#define NUM_SUITS 4
#define NUM_CARDS 5
//external variables
bool straight,flush,four,three;
int pairs;// possible values:0、1、2
void read_cards(int num_in_rank[],int num_in_suit[]);
void analyze_hand(int num_in_rank[],int num_in_suit[]);
void print_result(void);
int main()
{
	int num_in_rank[NUM_RANKS];
	int num_in_suit[NUM_SUITS];
	for(;;)
	{
		read_cards(num_in_rank,num_in_suit);
		analyze_hand(num_in_rank,num_in_suit);
		print_result();
	}
}
void read_cards(int num_in_rank[],int num_in_suit[])
{
	bool card_exists[NUM_RANKS][NUM_SUITS];
	char ch,rank_ch,suit_ch;
	int rank,suit;
	bool bad_card;
	int card_read=0;

	for(rank=0;rank<NUM_RANKS;rank++)
	{
		num_in_rank[rank]=0;
		for(suit=0;suit<NUM_SUITS;suit++)
		{
			card_exists[rank][suit]=false;
			num_in_suit[suit]=0;
		}
	}
	while(card_read<NUM_CARDS)
	{
		bad_card=false;
		printf("Enter a card:");
		rank_ch=getchar();
		switch(rank_ch)
		{
		case '0':         exit(EXIT_SUCCESS);
		case '2':         rank=0;break;
		case '3':         rank=1;break;
		case '4':         rank=2;break;
		case '5':         rank=3;break;
		case '6':         rank=4;break;
		case '7':         rank=5;break;
		case '8':         rank=6;break;
		case '9':         rank=7;break;
		case 't':case 'T':rank=8;break;
		case 'j':case 'J':rank=9;break;
		case 'q':case 'Q':rank=10;break;
		case 'k':case 'K':rank=11;break;
		case 'a':case 'A':rank=12;break;
		default:          bad_card=true;
		}
		suit_ch=getchar();
		switch(suit_ch)
		{
		case 'c':case 'C':suit=0;break;
		case 'd':case 'D':suit=1;break;
		case 'h':case 'H':suit=2;break;
		case 's':case 'S':suit=3;break;
		default:          bad_card=true;
		}

		while((ch=getchar())!='\n')
			if(ch!=' ') bad_card=true;

		if(bad_card)
			printf("Bad cards;ignored.\n");
		else if(card_exists[rank][suit])
			printf("Dulicate card; ignored.\n");
		else 
		{
			num_in_rank[rank]++;
			num_in_suit[suit]++;
			card_exists[rank][suit]=true;
			card_read++;
		}
	}

}
void analyze_hand(int num_in_rank[],int num_in_suit[])
{
	int num_consec=0;
	int rank,suit;

	straight=false;
	flush=false;
	four=false;
	three=false;
	pairs=0;

	//flush
	for(suit=0;suit<NUM_SUITS;suit++)
		if(num_in_suit[suit]==NUM_CARDS)
			flush=true;
	//straight
	rank=0;
	while(num_in_rank[rank]==0) rank++;
	for(;rank<NUM_RANKS&&num_in_rank[rank]>0;rank++)
		num_consec++;
	if(num_consec==NUM_CARDS) 
	{
		straight=true;
		return;
	}
	//check for 4-of-a-kind,3-of-a-kind,and pairs
	for(rank=0;rank<NUM_RANKS;rank++)
	{
		if(num_in_rank[rank]==4) four=true;
		if(num_in_rank[rank]==3) three=true;
		if(num_in_rank[rank]==2) pairs++;
	}
}
void print_result(void)
{
	if(straight&&flush)         printf("straight flush");
	else if(four)               printf("Four of a kind");
	else if(three&&pairs==1)    printf("Full house");
	else if(flush)              printf("flush");
	else if(straight)           printf("straight");
	else if(three)              printf("Three of a kind");
	else if(pairs==2)           printf("Two pairs");
	else if(pairs==1)           printf("Pair");
	else                        printf("High pairs");
	printf("\n\n");
}
3.
/************************************************************
there are some flaw in the code(in the function--analyze_hand)
if you want to get the correct answer,you must establish a new 
charactor array.when you analyze rank,you should sort all the 
cards in hand,and then store them in the array you established 
just away.good luck!
BTW I ignored
*************************************************************/

#include <stdio.h>
#include <stdlib.h>
#define NUM_RANK 13
#define NUM_SUIT 4
#define NUM_CARD 5
bool straight,flush,four,three,fullhouse;
int pairs;
char hand[NUM_CARD][2];
void read_cards(char hand[NUM_CARD][2]);
void analyze_hand(char hand[NUM_CARD][2]);
void print_result(void);
int main()
{
	for(;;)
	{
		read_cards(hand);
		analyze_hand(hand);
		print_result();
	}
}
void read_cards(char hand[NUM_CARD][2])
{
	int ncards=0,i;
	bool bad_card,Delicate=false,judge[NUM_CARD]={false};
	char ch_rank,ch_suit,ch;
	while(ncards<NUM_CARD)
	{
		bad_card=false;
		printf("Enter a card:");
		ch_rank=getchar();
		switch(ch_rank)
		{
		case '0':         exit(EXIT_SUCCESS);
		case '2':         ch_rank='2';break;
		case '3':         ch_rank='3';break;
		case '4':         ch_rank='4';break;
		case '5':         ch_rank='5';break;
		case '6':         ch_rank='6';break;
		case '7':         ch_rank='7';break;
		case '8':         ch_rank='8';break;
		case '9':         ch_rank='9';break;
		case 't':case 'T':ch_rank='t';break;
		case 'j':case 'J':ch_rank='j';break;
		case 'q':case 'Q':ch_rank='q';break;
		case 'k':case 'K':ch_rank='k';break;
		case 'a':case 'A':ch_rank='a';break;
		default:          bad_card=true;
		}    
		ch_suit=getchar(); 
		switch(ch_suit)
		{
		case 'c':case 'C':ch_suit='c';break;
		case 'd':case 'D':ch_suit='d';break;
		case 'h':case 'H':ch_suit='h';break;
		case 's':case 'S':ch_suit='s';break;
		default:          bad_card=true;
		}
		while((ch=getchar())!='\n')
			if(ch!=' ') bad_card=true;
		if(bad_card)
			printf("Bad cards;ignored.\n");
		for(i=0;i<ncards;i++)
		{
			if(hand[i][0]==ch_rank&&hand[i][1]==ch_suit)
			{
				Delicate=true;
				printf("Dulicate card; ignored.\n");
				break;
			}
		}
		if(!Delicate&&!bad_card)
		{
			hand[ncards][0]=ch_rank;
			hand[ncards][1]=ch_suit;
		}
		ncards++;
	}
	return;
}
void analyze_hand(char hand[NUM_CARD][2])
{
	int ncards,n,times=1,x=0;
	char ch,i;
	fullhouse=three=four=flush=straight=false;
	pairs=0;
	//flush
	for(ncards=1,ch=hand[0][1];ncards<NUM_CARD;ncards++)
	{
		if(hand[ncards][1]!=ch)
			break;
		else flush=true;
	}
	//straight
	for(ncards=1,i=hand[0][0];ncards<NUM_CARD;ncards++)
	{
		if(hand[ncards][0]!=++i)
			break;
		else straight=true;
	}
	//4—of-a-kind,3-of-a-kind
	for(ncards=0;ncards<NUM_CARD;ncards++)
	{
		ch=hand[ncards][0];times=1;
		for(n=0;n<NUM_CARD;n++)
		{
			if(hand[n][0]==ch&&n!=ncards)
			{times++;}
		}
		if(times==3||times==4)
			break;
	}
	if(times==4) four=true;
	if(times==3) three=true;
	//pairs
	for(ncards=0;ncards<NUM_CARD;ncards++)
	{
		times=1;
		for(ch=hand[ncards][0],n=0;n<NUM_CARD;n++)
		{
			if(hand[n][0]==ch&&n!=ncards)
				times++;
		}
		if(times==2)  pairs++;
	}
	pairs/=2;
	if(pairs==1)
	{
		for(ncards=0;ncards<NUM_CARD;ncards++)
		{
			times=1;
			for(ch=hand[ncards][0],n=0;n<NUM_CARD;n++)
			{
				if(hand[n][0]==ch&&n!=ncards)
					times++;
			}
			if(times==2) break;
		}
		if(times==2)
		{
			for(n=0;n<NUM_CARD;n++)
			{
				if(ch!=hand[n][0])
				{
					i=hand[n][1];
					break;
				}
			}
			for(x=1;n<NUM_CARD;n++)
			{
				if(ch!=hand[n][0]&&hand[n][1]!=i)
					break;
			}
			if(n=NUM_CARD-1) fullhouse=true;
		}

	}
}
void print_result(void)
{
	if(straight&&flush)       printf("straight flush\n");
	else if(four)             printf("Four of a kind\n");
	else if(fullhouse)        printf("Full house\n");
	else if(flush)            printf("flush\n");
	else if(straight)         printf("straight\n");
	else if(three)            printf("Three of a kind\n");
	else if(pairs==2)         printf("Two pairs\n");
	else if(pairs==1)         printf("Pairs\n");
	else                      printf("High pairs\n");
	printf("\n\n");  
}
6.
#include <stdio.h>
#define STACK_SIZE 100
int contents[STACK_SIZE];
int top=0;
void make_empty(void);
bool is_empty(void);
bool is_full(void);
void push(int i);
int pop(void);
void main()
{
	char input;
	int i;
	printf("Enter an RPN expression:");
	for(;;)
	{
		scanf(" %c",&input);
		if(input>='0'&&input<='9')
		{
			switch(input)
			{
			case '0': i=0;break;
			case '1': i=1;break;
			case '2': i=2;break;
			case '3': i=3;break;
			case '4': i=4;break;
			case '5': i=5;break;
			case '6': i=6;break;
			case '7': i=7;break;
			case '8': i=8;break;
			case '9': i=9;break;
			}
			push(i);
		}
		else if(input=='+')
			push(pop()+pop());
		else if(input=='*')
			push(pop()*pop());
		else if(input=='-')
			push(-pop()+pop());
		else if(input=='/')
			push((int)(1/((double)pop()/(double)pop())));
		else if(input=='=')
		{
			printf("%d\n",pop());
			printf("Enter an RPN expression:");
			make_empty();
		}
		else  return;

	}
}
void make_empty(void)
{
	top=0;
}
bool is_empty(void)
{
	return top==0;
}
bool is_full(void)
{
	return top==STACK_SIZE;
}
void push(int i)
{
	if(is_full())
		printf("Expression is too complex\n");
	else 
		contents[top++]=i;
}
int pop(void)
{
	if(is_empty())
		printf("Not enough operands in the expression\n");
	else 
		return contents[--top];
}