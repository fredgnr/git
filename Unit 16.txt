5.
typedef struct date
{
	int year;
	int month;
	int day;
}Date;
int month_day1[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
int month_day2[13]={0,31,29,31,30,31,30,31,31,30,31,30,31};
int day_of_year(Date time)
{
	int i,days=0;
	if(time.year%4==0(time.year%4!==100)||(time.year%400==0)){
		for(i=1;i<time.month;i++)
			days+=month_day1[i];
		days+=time.day;
	}
	else {
		for(i=1;i<time.month;i++)
			days+=month_day2[i];
		days+=time.day;
	}
	return days;
}
int compare_date(Date x1,Date x2)
{
	if(x1.year>x2.year)
		return 1;
	else if(x1.year<x2.year)
		return -1;
	else{
		if(x1.month>x2.month)
			return 1;
		else if(x1.month<x2.month)
			return -1;
		else{ 
			if(x1.day>x2.day)
				return 1;
			else if(x1.day<x2.day)
				return -1;
			else 
				return 0;
		}
	}

}
14.
typedef enum{RECTANGLE,CIRCLE} shape_kind;
#define PI 3.14
typedef struct{
	double x,y;
}point;
struct shape{
	shape_kind shape;
	point center;
	union{
		struct {
			double height,width;
		}rectangle;
		struct {
			double radius;
		}circle;
	}u;
}s;
double value_s(struct shape s)
{
	double s;
	if(s.shape==RECTANGLE)
		s=s.rectangle.height*s.rectangle.width;
	else 
		s=PI*s.circle.radius*s.circle.radius;
	return s;
}
struct shape remove(struct shape s,double x,double y)
{
	s.center.x+=x;
	s.center.y+=y;
	return s;
}
struct shape zoom(struct shape s,double zoom)
{
	if(s.shape==CIRCLE)
		s.circle.radius/=zoom;
	else{
		s.rectangle.width/=zoom;
		s.rectangle.height/=zoom;
	}
	return s;
}
